.686
.model flat
.xmm
public _ciag

.code
_ciag PROC ; double ciag(uint32* x);
	push ebp
	mov ebp, esp
	finit

	mov eax, [ebp + 8] ; wsk na x
	mov eax, [eax] ; x

	cmp eax, 1
	je piec
	cmp eax, 2
	je szesc

	dec eax
	push eax
	push esp
	call _ciag ; ciag(x-1) |
	add esp, 8
	inc eax

	push dword ptr 3
	fild dword ptr [esp] ; 3 | ciag |
	fxch ; ciag | 3
	fsub ; 3-ciag
	add esp, 4

	push eax
	fild dword ptr [esp] ; x | 3-ciag
	add esp, 4
	fdiv ; (3-ciag)/x
	jmp koniec

piec:
	push dword ptr 5
	fild dword ptr [esp]
	add esp, 4
	jmp koniec

szesc:
	push dword ptr 6
	fild dword ptr [esp]
	add esp, 4

koniec:
	pop ebp
	ret
_ciag ENDP

END

;=============

#include <iostream>
#include <bitset>
#include <Windows.h>
using namespace std;
extern "C" double ciag(UINT32* x);

double test(UINT32 x)
{
	if (x == 1) return 5.0;
	if (x == 2) return 6.0;
	else return (3 - test(x - 1)) / x;
}

int main()
{	
	UINT32 a = 123;
	cout << test(a);
	cout << endl << ciag(&a);

	return 0;}